require 'cocoapods-dependency-graph/gem_version'
require 'cocoapods'
require 'fileutils'
require_relative 'cocoapods-dependency-graph/generator/excel_generator'
require_relative 'cocoapods-dependency-graph/generator/json_generator'
require_relative 'cocoapods-dependency-graph/generator/graph_generator'

module Output 
  GRAPH = :graph
  JSON = :json
  EXCEL = :excel
end

# attr_accessor for class variable.
def class_attr_accessor(symbol)
    self.class.send(:attr_accessor, symbol)
end

module Pod    
  class Podfile
    module DSL
      def dependency_output(output_symbol)
        DSL.dependency_output_format = output_symbol 
      end

      private
      class_attr_accessor :dependency_output_format
      DSL.dependency_output_format = Output::GRAPH
    end
  end
end

module Dependency
  class Graph
    attr_accessor :output_class_hash

    def init_output_hash
      @output_class_hash = {
        :graph => 'Dependency::GraphGenerator', 
        :json => 'Dependency::JsonGenerator', 
        :excel => 'Dependency::ExcelGenerator'
      }
    end

    # @param [Array<UmbrellaTargetDescription>] The list of
    #         the CocoaPods umbrella targets generated by the installer.
    #
    def generate(umbrella_targets)
      unless umbrella_targets.length() > 0
        puts "No target detected"
      end
      
      umbrella_targets.each { |target| 
        next if target.cocoapods_target_label.end_with?("Tests")
        generate_graph_for_target(target)
      }
    end

    # @param [UmbrellaTargetDescription] umbrella_target
    def generate_graph_for_target(umbrella_target)
      module_spec_hash = {}
      umbrella_target.specs.each { | spec |
        module_spec_hash[spec.name] = spec
      } 
      
      init_output_hash
      output_key = Pod::Podfile::DSL.dependency_output_format
      output_key = Output::GRAPH unless output_key
    
      generator_string = @output_class_hash[output_key]

      unless generator_string 
        puts "The dependency_output should be one of #{Output::GRAPH}, #{Output::JSON}, and #{Output::EXCEL}"
        return 
      end

      generator_class = Object.const_get(generator_string)
      generator_class.new.generate(umbrella_target,module_spec_hash)
    end
  end
end

