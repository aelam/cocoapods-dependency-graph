require 'json'

module Dependency 
  class JsonGenerator 
    # @param [Array<Specification>] specs a list specification
    def create_hash(specs)
      dependencies = Array.new
      specs.each { | spec |
        next unless spec.source
        dependencies << SpecNode.new(spec).to_hash
      }
      
      {:dependencies => dependencies}
    end

    def self.module_spec_hash 
      @@module_spec_hash
    end

    # @param  [UmbrellaTargetDescription] umbrella_target the CocoaPods umbrella targets generated by the installer.
    # @param  [Hash{<String, Specification>}] module_spec_hash 
    #
    def generate(umbrella_target, module_spec_hash)
      @@module_spec_hash = module_spec_hash
      dependency_hash = create_hash(umbrella_target.specs)
      # puts dependency_hash.to_json
      File.open("dependency_json.json","w") do |f|
        f.write(dependency_hash.to_json)
      end
    end

    class SpecNode 
      def spec_brief_info(spec)
        spec_brief = Hash.new
        spec_brief[:name] = spec.name
        spec_brief[:module_name] = spec.module_name
        spec_brief[:source] = spec.source
        spec_brief[:version] = spec.version
        spec_brief[:homepage] = spec.homepage
        spec_brief[:local] =  spec.local? if spec.source
        spec_brief[:summary] = spec.root.attributes_hash['summary']
        spec_brief[:subspec] = spec.subspecs 
  
        spec_brief
      end

      def initialize(spec) 
        @name = spec_brief_info(spec)
        @dependencies = []
        spec.dependencies.each { | dependency |
          d_spec = JsonGenerator.module_spec_hash[dependency.name]
          next unless d_spec.source
          @dependencies << SpecNode.new(d_spec).to_hash
        }
      end 

      def to_hash() 
        res = Hash.new
        res[:name] = @name          
        res[:dependencies] = @dependencies
        res
      end
    end
  end
end